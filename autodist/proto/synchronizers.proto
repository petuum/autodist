// Copyright 2020 Petuum
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * AutoDist synchronization messages.
 */
syntax = "proto3";

package autodist.proto;

/**
 * Synchronization using a Parameter Server.
 */
message PSSynchronizer {
    string reduction_destination = 1;  // Parameter Server to use
    bool local_replication = 2;  // Whether to create local proxies of each PS variable
    bool sync = 3;  // Whether to sync gradients across between-graph replications
    int32 staleness = 4;  // Staleness
}

/**
 * Synchronization using AllReduce.
 */
message AllReduceSynchronizer {
    /** Which communication method to use */
    enum Spec {
        AUTO = 0;  // Runtime's automatic choices
        NCCL = 1;  // Use ncclAllReduce for all-reduce, and ring algorithms for all-gather
        RING = 2;  // TensorFlow's ring algorithms for all-reduce and all-gather
    }

    Spec spec = 1;  // Specification for collective communication

    /** Which gradient compression method to use */
    enum Compressor {
        NoneCompressor = 0;  // No compression
        HorovodCompressor = 1;  //  Horovod's Compression
        HorovodCompressorEF = 2;  // Horovod's Compression but with Error Feedback.
        // PowerSGDCompressor = 3;  // PowerSGD compression algorithm (arxiv.org/abs/1905.13727)
    }

    Compressor compressor = 2;  // One of the compressors to choose

    /** The allreduce group to merge with. The group index should be less than the number of variables */
    int32 group = 3;
}
