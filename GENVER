#!/bin/sh

# GENVER returns a semantic version of the current branch.
# Place see the design spec at:
#    https://petuum.githost.io/internal/devops/release-tool

# genver_version=1.0.10

set -e

# Generates a PEP 440 compatible version instead of a semantic version.
if test "$1" = "--pep440"; then
   GENVER_PEP440="true"
fi

# Dependency checks.
dependencies="cat expr git"
for cmd in ${dependencies};
do
   if ! command -v "${cmd}" >/dev/null 2>&1; then
      >&2 echo "Command ${cmd} is unavailable."
      exit 1
   fi
done

# Validate the candidate version.
ROOT=$(git rev-parse --show-toplevel)
VERSION_FILE="${ROOT}/VERSION"

if test -f "${VERSION_FILE}"
then
   can_ver=$(cat "${VERSION_FILE}")
else
   >&2 echo "Error: Failed to find the VERSION file, please refer to" \
            "https://petuum.githost.io/internal/devops/release-tool" \
            "to init this branch."
   exit 1
fi

# Get the "git describe" version.
# Two cases:
# - Normal case, the versioning tags looks like "v1.0.0", "v1.0.1",...
# - Special case for a repository mirror. If the upstream repository has
#   versioning tags in the same format as ours, we suffix our versioning
#   tags with "(petuum)". E.g. "v1.0.0(petuum), v1.0.1(petuum)", ...
unique_tag="false"
if ! git_ver=$(git describe --abbrev=9 --match "v[0-9]*(petuum)" HEAD 2>/dev/null)
then
   if ! git_ver=$(git describe --abbrev=9 --match "v[0-9]*" HEAD 2>/dev/null)
   then
      >&2 echo "Error: Can't get any versioning tag, please refer to" \
               "https://petuum.githost.io/internal/devops/release-tool" \
               "to init this branch."
   fi
else
   unique_tag="true"
fi

# Strip the leading 'v' from the git describe version.
git_ver=$(expr "${git_ver}" : v*'\(.*\)')

if expr "${git_ver}" : '.*-[0-9]*-g.*'  >/dev/null
then # Branch is in the developping state.
   # Extract each part of the "git describe" version.
   tag_ver=$(expr "$git_ver" : '\(.*\)-[0-9]*-g.*')
   commit_count=$(expr "$git_ver" : '.*-\([0-9]*\)-g.*')
   commit_hash=$(expr "$git_ver" : '.*-[0-9]*-\(g.*\)')

   # Per the design spec user is not allowed to check in new changes before
   # updating the candidate version. The following code make sure the candidate
   # version has been updated and it is different with the version tag.
   if test "$can_ver" = "$tag_ver"
   then
      >&2 echo "Error: Please update the candidate version before merging" \
               "new changes to this branch."
      exit 1
   fi

   if test "${GENVER_PEP440:-}" = "true"
   then
      sem_ver="${can_ver}.dev${commit_count}+${commit_hash}"
   else
      # Generate the semantic version for pre-release.
      # Case 1 (candidate version contains hyphen):
      #    candidate version(VERSION file) : 1.0.0-p1
      #                                      ========
      #    git describe returns            : 1.0.0-2-gde2198c
      #                                           ~~~~~~~~~~~
      #    semantic version(generated)     : 1.0.0-p1.2.gde2198c
      #                                      ========~~~~~~~~~~~
      #                                              ^ ^
      # Case 2:
      #    candidate version(VERSION file) : 1.0.1
      #                                      =====
      #    git describe returns            : 1.0.0-2-gde2198c
      #                                           ~~~~~~~~~~~
      #    semantic version(generated)     : 1.0.1-2.gde2198c
      #                                      =====~~~~~~~~~~~
      #                                             ^
      if expr "$can_ver" : ".*-" >/dev/null
      then
         sem_ver="${can_ver}.${commit_count}.${commit_hash}"
      else
         sem_ver="${can_ver}-${commit_count}.${commit_hash}"
      fi
   fi
else # Branch is in the released state.
   if "${unique_tag}" = "true"
   then
      sem_ver=$(expr "$git_ver" : '\(.*\)(petuum)')
   else
      sem_ver="${git_ver}"
   fi
fi

echo "${sem_ver}"
