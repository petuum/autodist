// Copyright 2020 Petuum
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * AutoDist distributed strategy messages.
 *
 * Represents how to distribute a TensorFlow computational graph.
 */
syntax = "proto3";

package autodist.proto;

import "autodist/proto/synchronizers.proto";


/**
 * Represents the strategy the AutoDist backend will implement.
 */
message Strategy {
    string id = 1;  /// unique strategy identifier
    string path = 2;  /// optional serialized strategy message temp path

    /**
     * Represents the configuration of an individual node in the graph.
     *
     * Right now, these nodes are just variables in the graph, so the only
     * information they contain is how to synchronize the variable's gradients.
     *
     * In the future, for node partitioning, these could be any node in the graph.
     * In that case, they would also have more logic for partitioning the op.
     */
    message Node {
        string var_name = 1;  /// variable name
        oneof synchronizer {
            autodist.proto.PSSynchronizer PSSynchronizer = 2;  // One of a synchronizer to choose
            autodist.proto.AllReduceSynchronizer AllReduceSynchronizer = 3;  // One of a synchronizer to choose
        }
        string partitioner = 4;  // Optional partitioner configuration, e.g. `1, 2, 1`
        repeated Node part_config = 5;   // Optional node configs for each node partition (if partitioned)
    }

    /** configuration of some individual nodes of the computational graph */
    repeated Node node_config = 3;

    /**
     * Represents the configuration of the graph as a whole.
     *
     * Based on the list of replicas, the AutoDist backend does
     * a combination of in-graph and between-graph distribution.
     */
    message GraphConfig {
        /** the number of batch-splitting/data-parallel replicas */
        repeated string replicas = 1;
    }

    /** configuration of the computational graph as a whole */
    GraphConfig graph_config = 4;
}
