---
stages:
  - toolchain
  - lint
  - build
  - test
  - test_dist
  - release

variables:
  TOOLCHAIN_IMAGE: registry.petuum.com/internal/scalable-ml/autodist/toolchain:ci_latest
  TOOLCHAIN_IMAGE_DIST: registry.petuum.com/internal/scalable-ml/autodist/toolchain:ci_dist
  ARTIFACT_ROOT: /data/artifacts
  # NOTE: don't forget to set the IP in resource_specs

update-toolchain:
  stage: toolchain
  image: registry.petuum.com/internal/devops/docker-dind-jq:1.0
  tags:
    - docker
  before_script:
    - docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD} ${REGISTRY_URL}
  script:
    - ./docker/toolchain/update_toolchain_image.sh

lint:
  stage: lint
  image: '${TOOLCHAIN_IMAGE}'
  except:
    - master
    - /^release-.+$/
    - tags
    - /^.*doc.*$/
  tags:
    - docker
  script:
    - prospector autodist


build_wheel:
  stage: build
  tags:
    - docker
  except:
    - /^.*doc.*$/
  image: python:3.6-slim
  before_script:
    - apt-get update
    - apt-get install -y git wget unzip
    - pip install wheel
    - wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.0/protoc-3.11.0-linux-x86_64.zip
    - unzip protoc-3.11.0-linux-x86_64.zip
    - export PROTOC=$(pwd)/bin/protoc
  script:
    - VERSION=$(./GENVER --pep440) HOME=$(pwd) python setup.py bdist_wheel
    - ls dist  # print whl version
  artifacts:
    name: "whl"
    paths:
      - dist
    expire_in: 1 day


.job_template: &tests_template
  stage: test
  except:
    # - master # For dev coverage report
    - /^release-.+$/
    - /^.*doc.*$/
    - tags
    - /^.*skip.*$/
  before_script:
    # dist as artifacts from build_wheel
    - ls dist  # print whl version
    - pip install dist/autodist*.whl
  script:
    - cd tests  # force not using source
    - python3 -c "import autodist; print(autodist.__file__);"  # Check autodist is the installed one instead of source
    - 'python3 -m pytest -s --run-integration --cov=autodist --cov-branch --cov-report term-missing --cov-report html:htmlcov --ignore=integration/test_dist.py .'
    # Above line is stressed in string because of the colon.
  artifacts:
    name: cov-report
    paths:
      - tests/htmlcov
    expire_in: 1 day

tests:
  <<: *tests_template
  image: '${TOOLCHAIN_IMAGE}'
  tags:
    - gpu_runner
    - master_node

test_tf1:
  <<: *tests_template
  image: '${TOOLCHAIN_IMAGE}_tf1'
  tags:
    - gpu_runner
    - worker_node
  only:
    # Master as dev follows fast-forward commits, so
    #   if tf1 tests are passed on branch,
    #   we only need one test job for coverage report.
    - branches

.job_template: &dist_tests
  stage: test_dist
  image: '${TOOLCHAIN_IMAGE_DIST}'
  only:
    refs:
      - master
    variables:
      - $CI_COMMIT_MESSAGE =~ /^release-.+$/
  tags:
    - gpu_runner
    - master_node
  before_script:
    # dist as artifacts from build_wheel
    - ls dist  # print whl version
    # "distribution_trigger.sh is used to manage the autodist repo on target cluster"
    - source scripts/distribution_setup.sh
  script:
    # execution entrance code
    - ssh -i /tmp/credentials/id_rsa autodist@$NODE1 "bash /home/autodist/autodist/scripts/distributed_test_trigger.sh"

dist_tests_master:
  <<: *dist_tests
  only:
    refs:
      - master

dist_tests_branch:
  <<: *dist_tests
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[run-dist\]/

release_docs:
  only:
    - master
    - /^release-.+$/
    - tags
    - /^.*doc.*$/
  stage: release
  image: '${TOOLCHAIN_IMAGE}'
  tags:
    - docker
    - nfs
  script:
    - apt-get update
    - apt-get install -y git wget unzip golang-go make rsync
    - pip install wheel
    - wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.0/protoc-3.11.0-linux-x86_64.zip
    - unzip protoc-3.11.0-linux-x86_64.zip
    - export PROTOC=$(pwd)/bin/protoc
    - go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc
    - export PROTOC_PLUGINS=/root/go/bin/protoc-gen-doc
    - pip install -r docs/requirements-docgen.txt
    - HOME=$(pwd) python setup.py build
    - cd docs
    - ln -s ../README.md symlink_README.md
    - make clean
    - make apidoc
    - make html
    - mkdir -p ${ARTIFACT_ROOT}/${CI_PROJECT_PATH}
    - rsync -r --delete _build/html ${ARTIFACT_ROOT}/${CI_PROJECT_PATH}
  artifacts:
    name: "docs"
    paths:
      - docs/_build/html
    expire_in: 1 days

release_autodist_wheel:
  only:
    - master
    - /^release-.+$/
    - tags
  stage: release
  tags:
    - docker
  image: python:3.6-slim
  before_script:
    - pip install wheel
    - pip install twine
  script:
    # dist as artifacts from build_wheel
    - ls dist  # print whl version
    - twine upload --repository-url=http://pypi.int.petuum.com:8080/ -u "" -p "" dist/autodist*.whl
